// generated by Fast Light User Interface Designer (fluid) version 1.0110

#ifndef VideoParserUI_h
#define VideoParserUI_h
#include <FL/Fl.H>
#include "VideoParserWindow.h"
#include "VideoControlPanel.h"
#include "ImageView.h"
#include "ViewSelector.h"
#include "TextView.h"
#include "ParameterSelector.h"
#include "CommandSelector.h"
#include <FL/Fl_Button.H>
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_File_Chooser.H>
#include <vul/vul_file.h>
#include <VideoRepresentation/VideoTypes.h>
#include "Plotter.h"
#include "ModeSelector.h"

class VideoParserUI {
public:
  VideoParserUI();
  VideoParserWindow *mainWindow;
  VideoControlPanel *ctrlPanel1;
  ImageView *imageView1;
  ViewSelector *viewSelector1;
private:
  void cb_viewSelector1_i(ViewSelector*, void*);
  static void cb_viewSelector1(ViewSelector*, void*);
public:
  TextView *textView1;
  ParameterSelector *paramValue1;
private:
  void cb_paramValue1_i(ParameterSelector*, void*);
  static void cb_paramValue1(ParameterSelector*, void*);
public:
  CommandSelector *cmdSelector1;
private:
  void cb_cmdSelector1_i(CommandSelector*, void*);
  static void cb_cmdSelector1(CommandSelector*, void*);
public:
  Fl_Button *btnPlay;
private:
  void cb_btnPlay_i(Fl_Button*, void*);
  static void cb_btnPlay(Fl_Button*, void*);
public:
  VideoControlPanel *ctrlPanel2;
  ImageView *imageView2;
  ViewSelector *viewSelector2;
private:
  void cb_viewSelector2_i(ViewSelector*, void*);
  static void cb_viewSelector2(ViewSelector*, void*);
public:
  TextView *textView2;
  ParameterSelector *paramValue2;
private:
  void cb_paramValue2_i(ParameterSelector*, void*);
  static void cb_paramValue2(ParameterSelector*, void*);
public:
  CommandSelector *cmdSelector2;
private:
  void cb_cmdSelector2_i(CommandSelector*, void*);
  static void cb_cmdSelector2(CommandSelector*, void*);
public:
  Fl_Menu_Bar *mainMenuBar;
  static Fl_Menu_Item menu_mainMenuBar[];
private:
  void cb_Open_i(Fl_Menu_*, void*);
  static void cb_Open(Fl_Menu_*, void*);
  void cb_Preferences_i(Fl_Menu_*, void*);
  static void cb_Preferences(Fl_Menu_*, void*);
  void cb_Increase_i(Fl_Menu_*, void*);
  static void cb_Increase(Fl_Menu_*, void*);
  void cb_Decrease_i(Fl_Menu_*, void*);
  static void cb_Decrease(Fl_Menu_*, void*);
  void cb_Next_i(Fl_Menu_*, void*);
  static void cb_Next(Fl_Menu_*, void*);
  void cb_Previous_i(Fl_Menu_*, void*);
  static void cb_Previous(Fl_Menu_*, void*);
  void cb_Fast_i(Fl_Menu_*, void*);
  static void cb_Fast(Fl_Menu_*, void*);
  void cb_Fast1_i(Fl_Menu_*, void*);
  static void cb_Fast1(Fl_Menu_*, void*);
  void cb_First_i(Fl_Menu_*, void*);
  static void cb_First(Fl_Menu_*, void*);
  void cb_Precision_i(Fl_Menu_*, void*);
  static void cb_Precision(Fl_Menu_*, void*);
public:
  Fl_Button *btnPause;
private:
  void cb_btnPause_i(Fl_Button*, void*);
  static void cb_btnPause(Fl_Button*, void*);
public:
  UserArgumentsQuickView *usrArgMonitor;
private:
  void cb_usrArgMonitor_i(UserArgumentsQuickView*, void*);
  static void cb_usrArgMonitor(UserArgumentsQuickView*, void*);
public:
  ModeSelector *modeSelector;
private:
  void cb_modeSelector_i(ModeSelector*, void*);
  static void cb_modeSelector(ModeSelector*, void*);
public:
  void show(int argc, char** argv);
};
#include <FL/Fl_Double_Window.H>
#define ROOT_RADIO "&Input"
#include <FL/Fl_Input.H>
#include <FL/Fl_Return_Button.H>
#include "UserArgumentsEditor.h"
#include "UserArgumentsShowGroup.h"
#include <FL/Fl_Round_Button.H>
#include <FL/Fl_Group.H>

class PreferencesDlg {
public:
  PreferencesDlg(VideoParserWindow* pVideoParserWnd);
  Fl_Double_Window *optionWindow;
  Fl_Input *filename;
private:
  void cb_filename_i(Fl_Input*, void*);
  static void cb_filename(Fl_Input*, void*);
  void cb_Close_i(Fl_Return_Button*, void*);
  static void cb_Close(Fl_Return_Button*, void*);
public:
  UserArgumentsEditor *m_editor;
private:
  void cb_m_editor_i(UserArgumentsEditor*, void*);
  static void cb_m_editor(UserArgumentsEditor*, void*);
  void cb_Browse_i(Fl_Button*, void*);
  static void cb_Browse(Fl_Button*, void*);
public:
  UserArgumentsShowGroup *m_showGroup;
private:
  void cb_m_showGroup_i(UserArgumentsShowGroup*, void*);
  static void cb_m_showGroup(UserArgumentsShowGroup*, void*);
  void cb_Input_i(Fl_Round_Button*, void*);
  static void cb_Input(Fl_Round_Button*, void*);
  void cb_All_i(Fl_Round_Button*, void*);
  static void cb_All(Fl_Round_Button*, void*);
  void cb_Usage_i(Fl_Round_Button*, void*);
  static void cb_Usage(Fl_Round_Button*, void*);
  void cb_Options_i(Fl_Round_Button*, void*);
  static void cb_Options(Fl_Round_Button*, void*);
public:
  Fl_Group *m_editingGroup;
private:
  void cb_Save_i(Fl_Button*, void*);
  static void cb_Save(Fl_Button*, void*);
  void cb_Save1_i(Fl_Button*, void*);
  static void cb_Save1(Fl_Button*, void*);
public:
  void show();
  void UpdateInputFile(const char* szFilename);
  std::string ChooseFilename(bool bAllowCreate);
  bool SaveCurrentFile();
  void ReadInValues();
  void ReadOutValues();
private:
  VideoParserWindow* m_pVideoParserWnd; 
};
#endif
