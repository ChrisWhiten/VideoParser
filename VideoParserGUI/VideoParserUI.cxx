// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include "VideoParserUI.h"
#include "UserArgumentsQuickView.h"
extern vpl::UserArguments g_userArgs;

void VideoParserUI::cb_viewSelector1_i(ViewSelector* o, void*) {
  mainWindow->OnViewSelection(o);
}
void VideoParserUI::cb_viewSelector1(ViewSelector* o, void* v) {
  ((VideoParserUI*)(o->parent()->parent()->user_data()))->cb_viewSelector1_i(o,v);
}

void VideoParserUI::cb_paramValue1_i(ParameterSelector* o, void*) {
  mainWindow->OnParameterSelection(o);
}
void VideoParserUI::cb_paramValue1(ParameterSelector* o, void* v) {
  ((VideoParserUI*)(o->parent()->parent()->user_data()))->cb_paramValue1_i(o,v);
}

void VideoParserUI::cb_cmdSelector1_i(CommandSelector*, void* v) {
  imageView1->DoKeyboardEvent((int)v);

// If views are sync'ed, then we must redraw
// the other one too (for now, do it always)
imageView2->redraw();
}
void VideoParserUI::cb_cmdSelector1(CommandSelector* o, void* v) {
  ((VideoParserUI*)(o->parent()->parent()->user_data()))->cb_cmdSelector1_i(o,v);
}

void VideoParserUI::cb_btnPlay_i(Fl_Button* o, void*) {
  //mainWindow->StartParsing(true);


// If parsing (in play mode) is active, try to stop it. 
// Wait 30 seconds and return if it didn't stop
if (mainWindow->IsParsing())
{
	if (mainWindow->StopParsing(30))
		o->value(0);
}
else
{
	mainWindow->StartParsing();
	o->value(1);
};
}
void VideoParserUI::cb_btnPlay(Fl_Button* o, void* v) {
  ((VideoParserUI*)(o->parent()->user_data()))->cb_btnPlay_i(o,v);
}

void VideoParserUI::cb_viewSelector2_i(ViewSelector* o, void*) {
  mainWindow->OnViewSelection(o);
}
void VideoParserUI::cb_viewSelector2(ViewSelector* o, void* v) {
  ((VideoParserUI*)(o->parent()->parent()->user_data()))->cb_viewSelector2_i(o,v);
}

void VideoParserUI::cb_paramValue2_i(ParameterSelector* o, void*) {
  mainWindow->OnParameterSelection(o);
}
void VideoParserUI::cb_paramValue2(ParameterSelector* o, void* v) {
  ((VideoParserUI*)(o->parent()->parent()->user_data()))->cb_paramValue2_i(o,v);
}

void VideoParserUI::cb_cmdSelector2_i(CommandSelector*, void* v) {
  imageView2->DoKeyboardEvent((int)v);

// If views are sync'ed, then we must redraw
// the other one too (for now, do it always)
imageView1->redraw();
}
void VideoParserUI::cb_cmdSelector2(CommandSelector* o, void* v) {
  ((VideoParserUI*)(o->parent()->parent()->user_data()))->cb_cmdSelector2_i(o,v);
}

void VideoParserUI::cb_Open_i(Fl_Menu_*, void*) {
  Fl_File_Chooser fc(".", vpl::VideoFileExtensions(), 
	Fl_File_Chooser::SINGLE, "Open input video");

std::string strDir = vul_file::dirname(
	mainWindow->GetVideoFilename());
	
//std::cout << strDir << std::endl;

if (!strDir.empty())
	fc.directory(strDir.c_str());	

fc.preview(0);
fc.show();

while (fc.visible())
	Fl::wait();
	
if (fc.count() > 0)
{
	mainWindow->LoadVideo(fc.value(0));
};
}
void VideoParserUI::cb_Open(Fl_Menu_* o, void* v) {
  ((VideoParserUI*)(o->parent()->user_data()))->cb_Open_i(o,v);
}

void VideoParserUI::cb_Preferences_i(Fl_Menu_*, void*) {
  PreferencesDlg dlg(mainWindow);
dlg.show();
}
void VideoParserUI::cb_Preferences(Fl_Menu_* o, void* v) {
  ((VideoParserUI*)(o->parent()->user_data()))->cb_Preferences_i(o,v);
}

void VideoParserUI::cb_Increase_i(Fl_Menu_*, void*) {
  double zl = mainWindow->GetZoomLevel();

mainWindow->SetZoomLevel(zl + 0.25);
}
void VideoParserUI::cb_Increase(Fl_Menu_* o, void* v) {
  ((VideoParserUI*)(o->parent()->user_data()))->cb_Increase_i(o,v);
}

void VideoParserUI::cb_Decrease_i(Fl_Menu_*, void*) {
  double zl = mainWindow->GetZoomLevel();

mainWindow->SetZoomLevel(zl - 0.25);
}
void VideoParserUI::cb_Decrease(Fl_Menu_* o, void* v) {
  ((VideoParserUI*)(o->parent()->user_data()))->cb_Decrease_i(o,v);
}

void VideoParserUI::cb_Next_i(Fl_Menu_*, void*) {
  mainWindow->RequestRelativeFrame(
	VideoParserWindow::ONE_FRAME_FORWARD);
}
void VideoParserUI::cb_Next(Fl_Menu_* o, void* v) {
  ((VideoParserUI*)(o->parent()->user_data()))->cb_Next_i(o,v);
}

void VideoParserUI::cb_Previous_i(Fl_Menu_*, void*) {
  mainWindow->RequestRelativeFrame(
	VideoParserWindow::ONE_FRAME_BACKWARD);
}
void VideoParserUI::cb_Previous(Fl_Menu_* o, void* v) {
  ((VideoParserUI*)(o->parent()->user_data()))->cb_Previous_i(o,v);
}

void VideoParserUI::cb_Fast_i(Fl_Menu_*, void*) {
  mainWindow->RequestRelativeFrame(
	VideoParserWindow::ONE_SECOND_FORWARD);
}
void VideoParserUI::cb_Fast(Fl_Menu_* o, void* v) {
  ((VideoParserUI*)(o->parent()->user_data()))->cb_Fast_i(o,v);
}

void VideoParserUI::cb_Fast1_i(Fl_Menu_*, void*) {
  mainWindow->RequestRelativeFrame(
	VideoParserWindow::ONE_SECOND_BACKWARD);
}
void VideoParserUI::cb_Fast1(Fl_Menu_* o, void* v) {
  ((VideoParserUI*)(o->parent()->user_data()))->cb_Fast1_i(o,v);
}

void VideoParserUI::cb_First_i(Fl_Menu_*, void*) {
  mainWindow->RequestRelativeFrame(
	VideoParserWindow::FIRST_FRAME);
}
void VideoParserUI::cb_First(Fl_Menu_* o, void* v) {
  ((VideoParserUI*)(o->parent()->user_data()))->cb_First_i(o,v);
}

void VideoParserUI::cb_Precision_i(Fl_Menu_*, void*) {
  Plotter p;

char* args[1] = {"Hello world"};

p.Create(1, args);
}
void VideoParserUI::cb_Precision(Fl_Menu_* o, void* v) {
  ((VideoParserUI*)(o->parent()->user_data()))->cb_Precision_i(o,v);
}

Fl_Menu_Item VideoParserUI::menu_mainMenuBar[] = {
 {"File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Open...", 0x4006f,  (Fl_Callback*)VideoParserUI::cb_Open, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Preferences...", 0x40070,  (Fl_Callback*)VideoParserUI::cb_Preferences, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"View", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Increase window size", 0xff55,  (Fl_Callback*)VideoParserUI::cb_Increase, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Decrease window size", 0xff56,  (Fl_Callback*)VideoParserUI::cb_Decrease, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Next frame", 0x6e,  (Fl_Callback*)VideoParserUI::cb_Next, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Previous frame", 0x4ff51,  (Fl_Callback*)VideoParserUI::cb_Previous, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Fast forward", 0x4006e,  (Fl_Callback*)VideoParserUI::cb_Fast, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Fast rewind", 0x5ff51,  (Fl_Callback*)VideoParserUI::cb_Fast1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"First frame", 0xff50,  (Fl_Callback*)VideoParserUI::cb_First, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Results", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Precision and Recall", 0,  (Fl_Callback*)VideoParserUI::cb_Precision, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

void VideoParserUI::cb_btnPause_i(Fl_Button* o, void*) {
  if (mainWindow->IsStopping()) // || !mainWindow->IsParsing())
{
	o->value(0);
}
else
{
	mainWindow->PauseParsing();
	o->value(o->value() ? 0:1);
};
}
void VideoParserUI::cb_btnPause(Fl_Button* o, void* v) {
  ((VideoParserUI*)(o->parent()->user_data()))->cb_btnPause_i(o,v);
}

void VideoParserUI::cb_usrArgMonitor_i(UserArgumentsQuickView* o, void*) {
  //UserArgumentsQuickView* p = dynamic_cast<UserArgumentsQuickView*>(o);
//p->Initialize();

// Re-initialize the Video Parser
mainWindow->Initialize();
}
void VideoParserUI::cb_usrArgMonitor(UserArgumentsQuickView* o, void* v) {
  ((VideoParserUI*)(o->parent()->user_data()))->cb_usrArgMonitor_i(o,v);
}

void VideoParserUI::cb_modeSelector_i(ModeSelector* o, void*) {
  mainWindow->OnModeSelection(o);
}
void VideoParserUI::cb_modeSelector(ModeSelector* o, void* v) {
  ((VideoParserUI*)(o->parent()->user_data()))->cb_modeSelector_i(o,v);
}

VideoParserUI::VideoParserUI() {
  { mainWindow = new VideoParserWindow(966, 645, "Video Parser");
    mainWindow->box(FL_FLAT_BOX);
    mainWindow->color((Fl_Color)FL_BACKGROUND_COLOR);
    mainWindow->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
    mainWindow->labeltype(FL_NO_LABEL);
    mainWindow->labelfont(0);
    mainWindow->labelsize(14);
    mainWindow->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
    mainWindow->user_data((void*)(this));
    mainWindow->align(FL_ALIGN_TOP);
    mainWindow->when(FL_WHEN_RELEASE);
    { ctrlPanel1 = new VideoControlPanel(25, 81, 435, 504, "Display 1");
      ctrlPanel1->box(FL_PLASTIC_UP_BOX);
      ctrlPanel1->color((Fl_Color)FL_BACKGROUND_COLOR);
      ctrlPanel1->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      ctrlPanel1->labeltype(FL_NORMAL_LABEL);
      ctrlPanel1->labelfont(0);
      ctrlPanel1->labelsize(14);
      ctrlPanel1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      ctrlPanel1->align(FL_ALIGN_TOP);
      ctrlPanel1->when(FL_WHEN_RELEASE);
      { imageView1 = new ImageView(25, 81, 435, 322, "Image View 1");
        imageView1->box(FL_BORDER_BOX);
        imageView1->color((Fl_Color)FL_BACKGROUND_COLOR);
        imageView1->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        imageView1->labeltype(FL_NORMAL_LABEL);
        imageView1->labelfont(0);
        imageView1->labelsize(14);
        imageView1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        imageView1->align(FL_ALIGN_CENTER);
        imageView1->when(FL_WHEN_RELEASE);
      } // ImageView* imageView1
      { viewSelector1 = new ViewSelector(43, 414, 200, 25);
        viewSelector1->box(FL_FLAT_BOX);
        viewSelector1->down_box(FL_BORDER_BOX);
        viewSelector1->color((Fl_Color)FL_BACKGROUND_COLOR);
        viewSelector1->selection_color((Fl_Color)FL_SELECTION_COLOR);
        viewSelector1->labeltype(FL_NO_LABEL);
        viewSelector1->labelfont(0);
        viewSelector1->labelsize(14);
        viewSelector1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        viewSelector1->callback((Fl_Callback*)cb_viewSelector1);
        viewSelector1->align(FL_ALIGN_LEFT);
        viewSelector1->when(FL_WHEN_RELEASE);
      } // ViewSelector* viewSelector1
      { textView1 = new TextView(41, 493, 395, 35);
        textView1->box(FL_DOWN_FRAME);
        textView1->color((Fl_Color)FL_BACKGROUND_COLOR);
        textView1->selection_color((Fl_Color)FL_SELECTION_COLOR);
        textView1->labeltype(FL_NO_LABEL);
        textView1->labelfont(0);
        textView1->labelsize(14);
        textView1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        textView1->textsize(10);
        textView1->align(FL_ALIGN_TOP);
        textView1->when(FL_WHEN_RELEASE);
      } // TextView* textView1
      { paramValue1 = new ParameterSelector(43, 453, 175, 25, "MultiParam1");
        paramValue1->box(FL_BORDER_BOX);
        paramValue1->color((Fl_Color)FL_BACKGROUND_COLOR);
        paramValue1->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        paramValue1->labeltype(FL_NO_LABEL);
        paramValue1->labelfont(0);
        paramValue1->labelsize(14);
        paramValue1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        paramValue1->callback((Fl_Callback*)cb_paramValue1);
        paramValue1->align(FL_ALIGN_LEFT);
        paramValue1->when(FL_WHEN_RELEASE);
        paramValue1->end();
      } // ParameterSelector* paramValue1
      { cmdSelector1 = new CommandSelector(41, 542, 400, 25);
        cmdSelector1->box(FL_DOWN_BOX);
        cmdSelector1->color((Fl_Color)FL_BACKGROUND_COLOR);
        cmdSelector1->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        cmdSelector1->labeltype(FL_NO_LABEL);
        cmdSelector1->labelfont(0);
        cmdSelector1->labelsize(14);
        cmdSelector1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        cmdSelector1->callback((Fl_Callback*)cb_cmdSelector1);
        cmdSelector1->align(FL_ALIGN_TOP);
        cmdSelector1->when(FL_WHEN_RELEASE);
        cmdSelector1->end();
      } // CommandSelector* cmdSelector1
      ctrlPanel1->end();
    } // VideoControlPanel* ctrlPanel1
    { btnPlay = new Fl_Button(203, 27, 50, 25, "@>");
      btnPlay->shortcut(0x40031);
      btnPlay->callback((Fl_Callback*)cb_btnPlay);
    } // Fl_Button* btnPlay
    { ctrlPanel2 = new VideoControlPanel(505, 81, 435, 504, "Display 2");
      ctrlPanel2->box(FL_PLASTIC_UP_BOX);
      ctrlPanel2->color((Fl_Color)FL_BACKGROUND_COLOR);
      ctrlPanel2->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      ctrlPanel2->labeltype(FL_NORMAL_LABEL);
      ctrlPanel2->labelfont(0);
      ctrlPanel2->labelsize(14);
      ctrlPanel2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      ctrlPanel2->align(FL_ALIGN_TOP);
      ctrlPanel2->when(FL_WHEN_RELEASE);
      { imageView2 = new ImageView(505, 81, 435, 322, "Image View 2");
        imageView2->box(FL_BORDER_BOX);
        imageView2->color((Fl_Color)FL_BACKGROUND_COLOR);
        imageView2->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        imageView2->labeltype(FL_NORMAL_LABEL);
        imageView2->labelfont(0);
        imageView2->labelsize(14);
        imageView2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        imageView2->align(FL_ALIGN_CENTER);
        imageView2->when(FL_WHEN_RELEASE);
      } // ImageView* imageView2
      { viewSelector2 = new ViewSelector(528, 411, 225, 25);
        viewSelector2->box(FL_FLAT_BOX);
        viewSelector2->down_box(FL_BORDER_BOX);
        viewSelector2->color((Fl_Color)FL_BACKGROUND_COLOR);
        viewSelector2->selection_color((Fl_Color)FL_SELECTION_COLOR);
        viewSelector2->labeltype(FL_NO_LABEL);
        viewSelector2->labelfont(0);
        viewSelector2->labelsize(14);
        viewSelector2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        viewSelector2->callback((Fl_Callback*)cb_viewSelector2);
        viewSelector2->align(FL_ALIGN_LEFT);
        viewSelector2->when(FL_WHEN_RELEASE);
      } // ViewSelector* viewSelector2
      { textView2 = new TextView(530, 496, 395, 35);
        textView2->box(FL_DOWN_FRAME);
        textView2->color((Fl_Color)FL_BACKGROUND_COLOR);
        textView2->selection_color((Fl_Color)FL_SELECTION_COLOR);
        textView2->labeltype(FL_NO_LABEL);
        textView2->labelfont(0);
        textView2->labelsize(14);
        textView2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        textView2->textsize(10);
        textView2->align(FL_ALIGN_TOP);
        textView2->when(FL_WHEN_RELEASE);
      } // TextView* textView2
      { paramValue2 = new ParameterSelector(530, 451, 165, 25, "MultiParam2");
        paramValue2->box(FL_BORDER_BOX);
        paramValue2->color((Fl_Color)FL_BACKGROUND_COLOR);
        paramValue2->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        paramValue2->labeltype(FL_NO_LABEL);
        paramValue2->labelfont(0);
        paramValue2->labelsize(14);
        paramValue2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        paramValue2->callback((Fl_Callback*)cb_paramValue2);
        paramValue2->align(FL_ALIGN_LEFT);
        paramValue2->when(FL_WHEN_RELEASE);
        paramValue2->end();
      } // ParameterSelector* paramValue2
      { cmdSelector2 = new CommandSelector(530, 542, 395, 25);
        cmdSelector2->box(FL_DOWN_BOX);
        cmdSelector2->color((Fl_Color)FL_BACKGROUND_COLOR);
        cmdSelector2->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        cmdSelector2->labeltype(FL_NO_LABEL);
        cmdSelector2->labelfont(0);
        cmdSelector2->labelsize(14);
        cmdSelector2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        cmdSelector2->callback((Fl_Callback*)cb_cmdSelector2);
        cmdSelector2->align(FL_ALIGN_TOP);
        cmdSelector2->when(FL_WHEN_RELEASE);
        cmdSelector2->end();
      } // CommandSelector* cmdSelector2
      ctrlPanel2->end();
    } // VideoControlPanel* ctrlPanel2
    { mainMenuBar = new Fl_Menu_Bar(0, 0, 1025, 25);
      mainMenuBar->menu(menu_mainMenuBar);
    } // Fl_Menu_Bar* mainMenuBar
    { btnPause = new Fl_Button(256, 27, 50, 25, "@||");
      btnPause->shortcut(0x40033);
      btnPause->callback((Fl_Callback*)cb_btnPause);
    } // Fl_Button* btnPause
    { usrArgMonitor = new UserArgumentsQuickView(315, 27, 914, 25, "User arguments");
      usrArgMonitor->box(FL_UP_BOX);
      usrArgMonitor->color((Fl_Color)FL_BACKGROUND_COLOR);
      usrArgMonitor->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      usrArgMonitor->labeltype(FL_NO_LABEL);
      usrArgMonitor->labelfont(0);
      usrArgMonitor->labelsize(14);
      usrArgMonitor->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      usrArgMonitor->callback((Fl_Callback*)cb_usrArgMonitor);
      usrArgMonitor->align(FL_ALIGN_TOP);
      usrArgMonitor->when(FL_WHEN_RELEASE);
      class UserArgumentsQuickView;
      usrArgMonitor->end();
    } // UserArgumentsQuickView* usrArgMonitor
    { modeSelector = new ModeSelector(5, 28, 195, 25);
      modeSelector->tooltip("Processing mode");
      modeSelector->box(FL_FLAT_BOX);
      modeSelector->down_box(FL_BORDER_BOX);
      modeSelector->color((Fl_Color)FL_BACKGROUND_COLOR);
      modeSelector->selection_color((Fl_Color)FL_SELECTION_COLOR);
      modeSelector->labeltype(FL_NO_LABEL);
      modeSelector->labelfont(0);
      modeSelector->labelsize(14);
      modeSelector->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      modeSelector->callback((Fl_Callback*)cb_modeSelector);
      modeSelector->align(FL_ALIGN_LEFT);
      modeSelector->when(FL_WHEN_RELEASE);
    } // ModeSelector* modeSelector
    mainWindow->end();
  } // VideoParserWindow* mainWindow
}

void VideoParserUI::show(int argc, char** argv) {
  // Show VideoParserWindow
ctrlPanel1->SetWidgets(imageView1, viewSelector1, 
	paramValue1, textView1, cmdSelector1);
	
ctrlPanel2->SetWidgets(imageView2, viewSelector2, 
	paramValue2, textView2, cmdSelector2);

mainWindow->SetPanels(ctrlPanel1, ctrlPanel2);

mainWindow->SetModeSelector(modeSelector);

mainWindow->SetMenuBar(mainMenuBar);

mainWindow->SetUserArgumentMonitor(usrArgMonitor);

mainWindow->Initialize();

mainWindow->position(20,30);

mainWindow->show(argc, argv);

mainWindow->LoadVideo();
}

void PreferencesDlg::cb_filename_i(Fl_Input* o, void*) {
  m_editor->LoadFile(o->value());
}
void PreferencesDlg::cb_filename(Fl_Input* o, void* v) {
  ((PreferencesDlg*)(o->parent()->user_data()))->cb_filename_i(o,v);
}

void PreferencesDlg::cb_Close_i(Fl_Return_Button*, void*) {
  // Close window
if (m_editor->IsModified())
{
	int c = fl_choice("Input file '%s' has changed", 
		"Cancel", "Save and close", "Don't save", 
		m_editor->GetFilename().c_str());
		
	if (c == 0)
		return;			
	else if (c == 1)
		SaveCurrentFile();				
}

//ReadOutValues();

optionWindow->hide();
}
void PreferencesDlg::cb_Close(Fl_Return_Button* o, void* v) {
  ((PreferencesDlg*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

void PreferencesDlg::cb_m_editor_i(UserArgumentsEditor* o, void*) {
  if (m_showGroup->Selection() == 0 && !o->IsModified())
{
	o->SetModified(true);
	m_editingGroup->label("Editing (modified)");
};
}
void PreferencesDlg::cb_m_editor(UserArgumentsEditor* o, void* v) {
  ((PreferencesDlg*)(o->parent()->user_data()))->cb_m_editor_i(o,v);
}

void PreferencesDlg::cb_Browse_i(Fl_Button*, void*) {
  std::string fname = ChooseFilename(false);

if (!fname.empty())
	UpdateInputFile(fname.c_str());
}
void PreferencesDlg::cb_Browse(Fl_Button* o, void* v) {
  ((PreferencesDlg*)(o->parent()->user_data()))->cb_Browse_i(o,v);
}

void PreferencesDlg::cb_m_showGroup_i(UserArgumentsShowGroup*, void*) {
  DBG_PRINT1("someting changed");
}
void PreferencesDlg::cb_m_showGroup(UserArgumentsShowGroup* o, void* v) {
  ((PreferencesDlg*)(o->parent()->user_data()))->cb_m_showGroup_i(o,v);
}

void PreferencesDlg::cb_Input_i(Fl_Round_Button* o, void*) {
  ((UserArgumentsShowGroup*) o->parent())->Update(0);
}
void PreferencesDlg::cb_Input(Fl_Round_Button* o, void* v) {
  ((PreferencesDlg*)(o->parent()->parent()->user_data()))->cb_Input_i(o,v);
}

void PreferencesDlg::cb_All_i(Fl_Round_Button* o, void*) {
  ((UserArgumentsShowGroup*) o->parent())->Update(1);
}
void PreferencesDlg::cb_All(Fl_Round_Button* o, void* v) {
  ((PreferencesDlg*)(o->parent()->parent()->user_data()))->cb_All_i(o,v);
}

void PreferencesDlg::cb_Usage_i(Fl_Round_Button* o, void*) {
  ((UserArgumentsShowGroup*) o->parent())->Update(2);
}
void PreferencesDlg::cb_Usage(Fl_Round_Button* o, void* v) {
  ((PreferencesDlg*)(o->parent()->parent()->user_data()))->cb_Usage_i(o,v);
}

void PreferencesDlg::cb_Options_i(Fl_Round_Button* o, void*) {
  ((UserArgumentsShowGroup*) o->parent())->Update(3);
}
void PreferencesDlg::cb_Options(Fl_Round_Button* o, void* v) {
  ((PreferencesDlg*)(o->parent()->parent()->user_data()))->cb_Options_i(o,v);
}

void PreferencesDlg::cb_Save_i(Fl_Button*, void*) {
  SaveCurrentFile();
}
void PreferencesDlg::cb_Save(Fl_Button* o, void* v) {
  ((PreferencesDlg*)(o->parent()->parent()->user_data()))->cb_Save_i(o,v);
}

void PreferencesDlg::cb_Save1_i(Fl_Button*, void*) {
  // Ensure that the active buffer corresponds to the input tab
m_showGroup->SelectRadioButton(ROOT_RADIO);
m_showGroup->Update(0);

// Let the user choose a new file name
std::string fname = ChooseFilename(true);
	
// If there is a file selected...
if (!fname.empty() && m_editor->SaveBufferToFile(fname.c_str()))
{
	int c = fl_choice("File saved!", "Reload old file", 
		"Load new file", NULL);
					
	UpdateInputFile((c == 1) ? fname.c_str() 
		: m_editor->GetFilename().c_str());		
};
}
void PreferencesDlg::cb_Save1(Fl_Button* o, void* v) {
  ((PreferencesDlg*)(o->parent()->parent()->user_data()))->cb_Save1_i(o,v);
}

PreferencesDlg::PreferencesDlg(VideoParserWindow* pVideoParserWnd) {
  { optionWindow = new Fl_Double_Window(682, 645, "User Arguments");
    optionWindow->user_data((void*)(this));
    { filename = new Fl_Input(58, 24, 500, 23, "Input:");
      filename->callback((Fl_Callback*)cb_filename);
    } // Fl_Input* filename
    { Fl_Return_Button* o = new Fl_Return_Button(569, 58, 95, 25, "&Close");
      o->shortcut(0x40063);
      o->callback((Fl_Callback*)cb_Close);
    } // Fl_Return_Button* o
    { m_editor = new UserArgumentsEditor(20, 145, 645, 485);
      m_editor->box(FL_DOWN_FRAME);
      m_editor->color((Fl_Color)FL_BACKGROUND2_COLOR);
      m_editor->selection_color((Fl_Color)FL_SELECTION_COLOR);
      m_editor->labeltype(FL_NORMAL_LABEL);
      m_editor->labelfont(0);
      m_editor->labelsize(14);
      m_editor->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      m_editor->textfont(4);
      m_editor->callback((Fl_Callback*)cb_m_editor);
      m_editor->align(FL_ALIGN_TOP);
      m_editor->when(FL_WHEN_CHANGED);
      Fl_Group::current()->resizable(m_editor);
    } // UserArgumentsEditor* m_editor
    { Fl_Button* o = new Fl_Button(569, 23, 95, 25, "&Browse...");
      o->shortcut(0x40062);
      o->callback((Fl_Callback*)cb_Browse);
    } // Fl_Button* o
    { m_showGroup = new UserArgumentsShowGroup(20, 85, 315, 45, "Show");
      m_showGroup->box(FL_THIN_DOWN_BOX);
      m_showGroup->color((Fl_Color)FL_BACKGROUND_COLOR);
      m_showGroup->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      m_showGroup->labeltype(FL_NORMAL_LABEL);
      m_showGroup->labelfont(0);
      m_showGroup->labelsize(14);
      m_showGroup->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      m_showGroup->callback((Fl_Callback*)cb_m_showGroup);
      m_showGroup->align(FL_ALIGN_TOP_LEFT);
      m_showGroup->when(FL_WHEN_CHANGED);
      { Fl_Round_Button* o = new Fl_Round_Button(32, 97, 25, 23, "&Input");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->value(1);
        o->shortcut(0x40069);
        o->callback((Fl_Callback*)cb_Input);
        o->when(FL_WHEN_RELEASE_ALWAYS);
      } // Fl_Round_Button* o
      { Fl_Round_Button* o = new Fl_Round_Button(97, 97, 25, 23, "&All");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->shortcut(0x40061);
        o->callback((Fl_Callback*)cb_All);
        o->when(FL_WHEN_RELEASE_ALWAYS);
      } // Fl_Round_Button* o
      { Fl_Round_Button* o = new Fl_Round_Button(147, 96, 25, 24, "&Usage Info");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->shortcut(0x40075);
        o->callback((Fl_Callback*)cb_Usage);
      } // Fl_Round_Button* o
      { Fl_Round_Button* o = new Fl_Round_Button(247, 96, 25, 24, "&Options");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->shortcut(0x4006f);
        o->callback((Fl_Callback*)cb_Options);
      } // Fl_Round_Button* o
      m_showGroup->end();
    } // UserArgumentsShowGroup* m_showGroup
    { m_editingGroup = new Fl_Group(352, 85, 205, 45, "Editing");
      m_editingGroup->box(FL_THIN_DOWN_BOX);
      m_editingGroup->align(FL_ALIGN_TOP_LEFT);
      { Fl_Button* o = new Fl_Button(365, 95, 82, 26, "&Save");
        o->shortcut(0x40073);
        o->callback((Fl_Callback*)cb_Save);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(460, 95, 82, 26, "Save As...");
        o->callback((Fl_Callback*)cb_Save1);
      } // Fl_Button* o
      m_editingGroup->end();
    } // Fl_Group* m_editingGroup
    optionWindow->set_non_modal();
    optionWindow->end();
  } // Fl_Double_Window* optionWindow
  // PreferencesDlg Constructor
m_pVideoParserWnd = pVideoParserWnd;
m_editor->SetUserArguments(&g_userArgs);
m_showGroup->SetEditor(m_editor);
}

void PreferencesDlg::show() {
  // PreferencesDlg Show

// Load current user arguments into the editor 
m_editor->LoadFile();

// Display the input file name
filename->value(m_editor->GetFilename().c_str());

//ReadInValues();

optionWindow->show();

while (optionWindow->shown()) 
	Fl::wait();
}

void PreferencesDlg::UpdateInputFile(const char* szFilename) {
  // Update user arguments
if (g_userArgs.ReadParameters(szFilename) && m_editor->LoadFile())
{
	// Display new filename
	filename->value(m_editor->GetFilename().c_str());
	
	// The editor's buffer will now contain the input text, so
	// update the radiocbutton selection accordingly
	m_showGroup->SelectRadioButton(ROOT_RADIO);
	
	// Specify that the text is not modified by ensuring
	// that the label of the editing group says only 'Editing'
	m_editor->SetModified(false);
	m_editingGroup->label("Editing");
	
	// Re-initialize the Video Parser
	m_pVideoParserWnd->Initialize();
}
}

std::string PreferencesDlg::ChooseFilename(bool bAllowCreate) {
  // Choose a file name
int type = bAllowCreate ? Fl_File_Chooser::CREATE : Fl_File_Chooser::SINGLE;

// Let the user hoose a new file name
Fl_File_Chooser fc(".", "Text Files (*.txt)", type, "Save As...");

// Get the directory portion of the current file name
std::string strDir = vul_file::dirname(m_editor->GetFilename());
	
// If there a directory, select it as the root directory
if (!strDir.empty())
	fc.directory(strDir.c_str());
	
// Set the initial file name
fc.value(m_editor->GetFilename().c_str());

fc.preview(0); // no file preview
fc.show();     // show file chooser

while (fc.visible())
	Fl::wait();
	
std::string fname;

// If there is at least one file selected
if (fc.count() > 0)
	fname = fc.value();

return fname;
}

bool PreferencesDlg::SaveCurrentFile() {
  // Save the current input file

// Ensure that the active buffer corresponds to the input tab
m_showGroup->SelectRadioButton(ROOT_RADIO);
m_showGroup->Update(0);

// If file is saved, update the input file
if (!m_editor->SaveBufferToFile())
	return false;
	
UpdateInputFile(m_editor->GetFilename().c_str());

return true;
}

void PreferencesDlg::ReadInValues() {
  // Read values to display
}

void PreferencesDlg::ReadOutValues() {
  // Write down the current values

/*VideoParserWindow::ParsingParams params;

params.strFilename = filename->value();
params.strOutputDir = outputDir->value();
params.nFirstFrame = (int)firstFrame->value();
params.nLastFrame = (int)lastFrame->value();
params.bSaveResults = (saveResults->value() != 0);

bool bMustReload = m_pVideoParserWnd->GetVideoFilename() != params.strFilename;
m_pVideoParserWnd->SetParams(params);
if (bMustReload) m_pVideoParserWnd->LoadVideo();*/
}
